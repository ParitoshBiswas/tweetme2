{"ast":null,"code":"/*! @preserve\n * numeral.js\n * version : 2.0.6\n * author : Adam Draper\n * license : MIT\n * http://adamwdraper.github.com/Numeral-js/\n */\n(function (global, factory) {\n  if (typeof define === 'function' && define.amd) {\n    define(factory);\n  } else if (typeof module === 'object' && module.exports) {\n    module.exports = factory();\n  } else {\n    global.numeral = factory();\n  }\n})(this, function () {\n  /************************************\n      Variables\n  ************************************/\n  var numeral,\n      _,\n      VERSION = '2.0.6',\n      formats = {},\n      locales = {},\n      defaults = {\n    currentLocale: 'en',\n    zeroFormat: null,\n    nullFormat: null,\n    defaultFormat: '0,0',\n    scalePercentBy100: true\n  },\n      options = {\n    currentLocale: defaults.currentLocale,\n    zeroFormat: defaults.zeroFormat,\n    nullFormat: defaults.nullFormat,\n    defaultFormat: defaults.defaultFormat,\n    scalePercentBy100: defaults.scalePercentBy100\n  };\n  /************************************\n      Constructors\n  ************************************/\n  // Numeral prototype object\n\n\n  function Numeral(input, number) {\n    this._input = input;\n    this._value = number;\n  }\n\n  numeral = function (input) {\n    var value, kind, unformatFunction, regexp;\n\n    if (numeral.isNumeral(input)) {\n      value = input.value();\n    } else if (input === 0 || typeof input === 'undefined') {\n      value = 0;\n    } else if (input === null || _.isNaN(input)) {\n      value = null;\n    } else if (typeof input === 'string') {\n      if (options.zeroFormat && input === options.zeroFormat) {\n        value = 0;\n      } else if (options.nullFormat && input === options.nullFormat || !input.replace(/[^0-9]+/g, '').length) {\n        value = null;\n      } else {\n        for (kind in formats) {\n          regexp = typeof formats[kind].regexps.unformat === 'function' ? formats[kind].regexps.unformat() : formats[kind].regexps.unformat;\n\n          if (regexp && input.match(regexp)) {\n            unformatFunction = formats[kind].unformat;\n            break;\n          }\n        }\n\n        unformatFunction = unformatFunction || numeral._.stringToNumber;\n        value = unformatFunction(input);\n      }\n    } else {\n      value = Number(input) || null;\n    }\n\n    return new Numeral(input, value);\n  }; // version number\n\n\n  numeral.version = VERSION; // compare numeral object\n\n  numeral.isNumeral = function (obj) {\n    return obj instanceof Numeral;\n  }; // helper functions\n\n\n  numeral._ = _ = {\n    // formats numbers separators, decimals places, signs, abbreviations\n    numberToFormat: function (value, format, roundingFunction) {\n      var locale = locales[numeral.options.currentLocale],\n          negP = false,\n          optDec = false,\n          leadingCount = 0,\n          abbr = '',\n          trillion = 1000000000000,\n          billion = 1000000000,\n          million = 1000000,\n          thousand = 1000,\n          decimal = '',\n          neg = false,\n          abbrForce,\n          // force abbreviation\n      abs,\n          min,\n          max,\n          power,\n          int,\n          precision,\n          signed,\n          thousands,\n          output; // make sure we never format a null value\n\n      value = value || 0;\n      abs = Math.abs(value); // see if we should use parentheses for negative number or if we should prefix with a sign\n      // if both are present we default to parentheses\n\n      if (numeral._.includes(format, '(')) {\n        negP = true;\n        format = format.replace(/[\\(|\\)]/g, '');\n      } else if (numeral._.includes(format, '+') || numeral._.includes(format, '-')) {\n        signed = numeral._.includes(format, '+') ? format.indexOf('+') : value < 0 ? format.indexOf('-') : -1;\n        format = format.replace(/[\\+|\\-]/g, '');\n      } // see if abbreviation is wanted\n\n\n      if (numeral._.includes(format, 'a')) {\n        abbrForce = format.match(/a(k|m|b|t)?/);\n        abbrForce = abbrForce ? abbrForce[1] : false; // check for space before abbreviation\n\n        if (numeral._.includes(format, ' a')) {\n          abbr = ' ';\n        }\n\n        format = format.replace(new RegExp(abbr + 'a[kmbt]?'), '');\n\n        if (abs >= trillion && !abbrForce || abbrForce === 't') {\n          // trillion\n          abbr += locale.abbreviations.trillion;\n          value = value / trillion;\n        } else if (abs < trillion && abs >= billion && !abbrForce || abbrForce === 'b') {\n          // billion\n          abbr += locale.abbreviations.billion;\n          value = value / billion;\n        } else if (abs < billion && abs >= million && !abbrForce || abbrForce === 'm') {\n          // million\n          abbr += locale.abbreviations.million;\n          value = value / million;\n        } else if (abs < million && abs >= thousand && !abbrForce || abbrForce === 'k') {\n          // thousand\n          abbr += locale.abbreviations.thousand;\n          value = value / thousand;\n        }\n      } // check for optional decimals\n\n\n      if (numeral._.includes(format, '[.]')) {\n        optDec = true;\n        format = format.replace('[.]', '.');\n      } // break number and format\n\n\n      int = value.toString().split('.')[0];\n      precision = format.split('.')[1];\n      thousands = format.indexOf(',');\n      leadingCount = (format.split('.')[0].split(',')[0].match(/0/g) || []).length;\n\n      if (precision) {\n        if (numeral._.includes(precision, '[')) {\n          precision = precision.replace(']', '');\n          precision = precision.split('[');\n          decimal = numeral._.toFixed(value, precision[0].length + precision[1].length, roundingFunction, precision[1].length);\n        } else {\n          decimal = numeral._.toFixed(value, precision.length, roundingFunction);\n        }\n\n        int = decimal.split('.')[0];\n\n        if (numeral._.includes(decimal, '.')) {\n          decimal = locale.delimiters.decimal + decimal.split('.')[1];\n        } else {\n          decimal = '';\n        }\n\n        if (optDec && Number(decimal.slice(1)) === 0) {\n          decimal = '';\n        }\n      } else {\n        int = numeral._.toFixed(value, 0, roundingFunction);\n      } // check abbreviation again after rounding\n\n\n      if (abbr && !abbrForce && Number(int) >= 1000 && abbr !== locale.abbreviations.trillion) {\n        int = String(Number(int) / 1000);\n\n        switch (abbr) {\n          case locale.abbreviations.thousand:\n            abbr = locale.abbreviations.million;\n            break;\n\n          case locale.abbreviations.million:\n            abbr = locale.abbreviations.billion;\n            break;\n\n          case locale.abbreviations.billion:\n            abbr = locale.abbreviations.trillion;\n            break;\n        }\n      } // format number\n\n\n      if (numeral._.includes(int, '-')) {\n        int = int.slice(1);\n        neg = true;\n      }\n\n      if (int.length < leadingCount) {\n        for (var i = leadingCount - int.length; i > 0; i--) {\n          int = '0' + int;\n        }\n      }\n\n      if (thousands > -1) {\n        int = int.toString().replace(/(\\d)(?=(\\d{3})+(?!\\d))/g, '$1' + locale.delimiters.thousands);\n      }\n\n      if (format.indexOf('.') === 0) {\n        int = '';\n      }\n\n      output = int + decimal + (abbr ? abbr : '');\n\n      if (negP) {\n        output = (negP && neg ? '(' : '') + output + (negP && neg ? ')' : '');\n      } else {\n        if (signed >= 0) {\n          output = signed === 0 ? (neg ? '-' : '+') + output : output + (neg ? '-' : '+');\n        } else if (neg) {\n          output = '-' + output;\n        }\n      }\n\n      return output;\n    },\n    // unformats numbers separators, decimals places, signs, abbreviations\n    stringToNumber: function (string) {\n      var locale = locales[options.currentLocale],\n          stringOriginal = string,\n          abbreviations = {\n        thousand: 3,\n        million: 6,\n        billion: 9,\n        trillion: 12\n      },\n          abbreviation,\n          value,\n          i,\n          regexp;\n\n      if (options.zeroFormat && string === options.zeroFormat) {\n        value = 0;\n      } else if (options.nullFormat && string === options.nullFormat || !string.replace(/[^0-9]+/g, '').length) {\n        value = null;\n      } else {\n        value = 1;\n\n        if (locale.delimiters.decimal !== '.') {\n          string = string.replace(/\\./g, '').replace(locale.delimiters.decimal, '.');\n        }\n\n        for (abbreviation in abbreviations) {\n          regexp = new RegExp('[^a-zA-Z]' + locale.abbreviations[abbreviation] + '(?:\\\\)|(\\\\' + locale.currency.symbol + ')?(?:\\\\))?)?$');\n\n          if (stringOriginal.match(regexp)) {\n            value *= Math.pow(10, abbreviations[abbreviation]);\n            break;\n          }\n        } // check for negative number\n\n\n        value *= (string.split('-').length + Math.min(string.split('(').length - 1, string.split(')').length - 1)) % 2 ? 1 : -1; // remove non numbers\n\n        string = string.replace(/[^0-9\\.]+/g, '');\n        value *= Number(string);\n      }\n\n      return value;\n    },\n    isNaN: function (value) {\n      return typeof value === 'number' && isNaN(value);\n    },\n    includes: function (string, search) {\n      return string.indexOf(search) !== -1;\n    },\n    insert: function (string, subString, start) {\n      return string.slice(0, start) + subString + string.slice(start);\n    },\n    reduce: function (array, callback\n    /*, initialValue*/\n    ) {\n      if (this === null) {\n        throw new TypeError('Array.prototype.reduce called on null or undefined');\n      }\n\n      if (typeof callback !== 'function') {\n        throw new TypeError(callback + ' is not a function');\n      }\n\n      var t = Object(array),\n          len = t.length >>> 0,\n          k = 0,\n          value;\n\n      if (arguments.length === 3) {\n        value = arguments[2];\n      } else {\n        while (k < len && !(k in t)) {\n          k++;\n        }\n\n        if (k >= len) {\n          throw new TypeError('Reduce of empty array with no initial value');\n        }\n\n        value = t[k++];\n      }\n\n      for (; k < len; k++) {\n        if (k in t) {\n          value = callback(value, t[k], k, t);\n        }\n      }\n\n      return value;\n    },\n\n    /**\n     * Computes the multiplier necessary to make x >= 1,\n     * effectively eliminating miscalculations caused by\n     * finite precision.\n     */\n    multiplier: function (x) {\n      var parts = x.toString().split('.');\n      return parts.length < 2 ? 1 : Math.pow(10, parts[1].length);\n    },\n\n    /**\n     * Given a variable number of arguments, returns the maximum\n     * multiplier that must be used to normalize an operation involving\n     * all of them.\n     */\n    correctionFactor: function () {\n      var args = Array.prototype.slice.call(arguments);\n      return args.reduce(function (accum, next) {\n        var mn = _.multiplier(next);\n\n        return accum > mn ? accum : mn;\n      }, 1);\n    },\n\n    /**\n     * Implementation of toFixed() that treats floats more like decimals\n     *\n     * Fixes binary rounding issues (eg. (0.615).toFixed(2) === '0.61') that present\n     * problems for accounting- and finance-related software.\n     */\n    toFixed: function (value, maxDecimals, roundingFunction, optionals) {\n      var splitValue = value.toString().split('.'),\n          minDecimals = maxDecimals - (optionals || 0),\n          boundedPrecision,\n          optionalsRegExp,\n          power,\n          output; // Use the smallest precision value possible to avoid errors from floating point representation\n\n      if (splitValue.length === 2) {\n        boundedPrecision = Math.min(Math.max(splitValue[1].length, minDecimals), maxDecimals);\n      } else {\n        boundedPrecision = minDecimals;\n      }\n\n      power = Math.pow(10, boundedPrecision); // Multiply up by precision, round accurately, then divide and use native toFixed():\n\n      output = (roundingFunction(value + 'e+' + boundedPrecision) / power).toFixed(boundedPrecision);\n\n      if (optionals > maxDecimals - boundedPrecision) {\n        optionalsRegExp = new RegExp('\\\\.?0{1,' + (optionals - (maxDecimals - boundedPrecision)) + '}$');\n        output = output.replace(optionalsRegExp, '');\n      }\n\n      return output;\n    }\n  }; // avaliable options\n\n  numeral.options = options; // avaliable formats\n\n  numeral.formats = formats; // avaliable formats\n\n  numeral.locales = locales; // This function sets the current locale.  If\n  // no arguments are passed in, it will simply return the current global\n  // locale key.\n\n  numeral.locale = function (key) {\n    if (key) {\n      options.currentLocale = key.toLowerCase();\n    }\n\n    return options.currentLocale;\n  }; // This function provides access to the loaded locale data.  If\n  // no arguments are passed in, it will simply return the current\n  // global locale object.\n\n\n  numeral.localeData = function (key) {\n    if (!key) {\n      return locales[options.currentLocale];\n    }\n\n    key = key.toLowerCase();\n\n    if (!locales[key]) {\n      throw new Error('Unknown locale : ' + key);\n    }\n\n    return locales[key];\n  };\n\n  numeral.reset = function () {\n    for (var property in defaults) {\n      options[property] = defaults[property];\n    }\n  };\n\n  numeral.zeroFormat = function (format) {\n    options.zeroFormat = typeof format === 'string' ? format : null;\n  };\n\n  numeral.nullFormat = function (format) {\n    options.nullFormat = typeof format === 'string' ? format : null;\n  };\n\n  numeral.defaultFormat = function (format) {\n    options.defaultFormat = typeof format === 'string' ? format : '0.0';\n  };\n\n  numeral.register = function (type, name, format) {\n    name = name.toLowerCase();\n\n    if (this[type + 's'][name]) {\n      throw new TypeError(name + ' ' + type + ' already registered.');\n    }\n\n    this[type + 's'][name] = format;\n    return format;\n  };\n\n  numeral.validate = function (val, culture) {\n    var _decimalSep, _thousandSep, _currSymbol, _valArray, _abbrObj, _thousandRegEx, localeData, temp; //coerce val to string\n\n\n    if (typeof val !== 'string') {\n      val += '';\n\n      if (console.warn) {\n        console.warn('Numeral.js: Value is not string. It has been co-erced to: ', val);\n      }\n    } //trim whitespaces from either sides\n\n\n    val = val.trim(); //if val is just digits return true\n\n    if (!!val.match(/^\\d+$/)) {\n      return true;\n    } //if val is empty return false\n\n\n    if (val === '') {\n      return false;\n    } //get the decimal and thousands separator from numeral.localeData\n\n\n    try {\n      //check if the culture is understood by numeral. if not, default it to current locale\n      localeData = numeral.localeData(culture);\n    } catch (e) {\n      localeData = numeral.localeData(numeral.locale());\n    } //setup the delimiters and currency symbol based on culture/locale\n\n\n    _currSymbol = localeData.currency.symbol;\n    _abbrObj = localeData.abbreviations;\n    _decimalSep = localeData.delimiters.decimal;\n\n    if (localeData.delimiters.thousands === '.') {\n      _thousandSep = '\\\\.';\n    } else {\n      _thousandSep = localeData.delimiters.thousands;\n    } // validating currency symbol\n\n\n    temp = val.match(/^[^\\d]+/);\n\n    if (temp !== null) {\n      val = val.substr(1);\n\n      if (temp[0] !== _currSymbol) {\n        return false;\n      }\n    } //validating abbreviation symbol\n\n\n    temp = val.match(/[^\\d]+$/);\n\n    if (temp !== null) {\n      val = val.slice(0, -1);\n\n      if (temp[0] !== _abbrObj.thousand && temp[0] !== _abbrObj.million && temp[0] !== _abbrObj.billion && temp[0] !== _abbrObj.trillion) {\n        return false;\n      }\n    }\n\n    _thousandRegEx = new RegExp(_thousandSep + '{2}');\n\n    if (!val.match(/[^\\d.,]/g)) {\n      _valArray = val.split(_decimalSep);\n\n      if (_valArray.length > 2) {\n        return false;\n      } else {\n        if (_valArray.length < 2) {\n          return !!_valArray[0].match(/^\\d+.*\\d$/) && !_valArray[0].match(_thousandRegEx);\n        } else {\n          if (_valArray[0].length === 1) {\n            return !!_valArray[0].match(/^\\d+$/) && !_valArray[0].match(_thousandRegEx) && !!_valArray[1].match(/^\\d+$/);\n          } else {\n            return !!_valArray[0].match(/^\\d+.*\\d$/) && !_valArray[0].match(_thousandRegEx) && !!_valArray[1].match(/^\\d+$/);\n          }\n        }\n      }\n    }\n\n    return false;\n  };\n  /************************************\n      Numeral Prototype\n  ************************************/\n\n\n  numeral.fn = Numeral.prototype = {\n    clone: function () {\n      return numeral(this);\n    },\n    format: function (inputString, roundingFunction) {\n      var value = this._value,\n          format = inputString || options.defaultFormat,\n          kind,\n          output,\n          formatFunction; // make sure we have a roundingFunction\n\n      roundingFunction = roundingFunction || Math.round; // format based on value\n\n      if (value === 0 && options.zeroFormat !== null) {\n        output = options.zeroFormat;\n      } else if (value === null && options.nullFormat !== null) {\n        output = options.nullFormat;\n      } else {\n        for (kind in formats) {\n          if (format.match(formats[kind].regexps.format)) {\n            formatFunction = formats[kind].format;\n            break;\n          }\n        }\n\n        formatFunction = formatFunction || numeral._.numberToFormat;\n        output = formatFunction(value, format, roundingFunction);\n      }\n\n      return output;\n    },\n    value: function () {\n      return this._value;\n    },\n    input: function () {\n      return this._input;\n    },\n    set: function (value) {\n      this._value = Number(value);\n      return this;\n    },\n    add: function (value) {\n      var corrFactor = _.correctionFactor.call(null, this._value, value);\n\n      function cback(accum, curr, currI, O) {\n        return accum + Math.round(corrFactor * curr);\n      }\n\n      this._value = _.reduce([this._value, value], cback, 0) / corrFactor;\n      return this;\n    },\n    subtract: function (value) {\n      var corrFactor = _.correctionFactor.call(null, this._value, value);\n\n      function cback(accum, curr, currI, O) {\n        return accum - Math.round(corrFactor * curr);\n      }\n\n      this._value = _.reduce([value], cback, Math.round(this._value * corrFactor)) / corrFactor;\n      return this;\n    },\n    multiply: function (value) {\n      function cback(accum, curr, currI, O) {\n        var corrFactor = _.correctionFactor(accum, curr);\n\n        return Math.round(accum * corrFactor) * Math.round(curr * corrFactor) / Math.round(corrFactor * corrFactor);\n      }\n\n      this._value = _.reduce([this._value, value], cback, 1);\n      return this;\n    },\n    divide: function (value) {\n      function cback(accum, curr, currI, O) {\n        var corrFactor = _.correctionFactor(accum, curr);\n\n        return Math.round(accum * corrFactor) / Math.round(curr * corrFactor);\n      }\n\n      this._value = _.reduce([this._value, value], cback);\n      return this;\n    },\n    difference: function (value) {\n      return Math.abs(numeral(this._value).subtract(value).value());\n    }\n  };\n  /************************************\n      Default Locale && Format\n  ************************************/\n\n  numeral.register('locale', 'en', {\n    delimiters: {\n      thousands: ',',\n      decimal: '.'\n    },\n    abbreviations: {\n      thousand: 'k',\n      million: 'm',\n      billion: 'b',\n      trillion: 't'\n    },\n    ordinal: function (number) {\n      var b = number % 10;\n      return ~~(number % 100 / 10) === 1 ? 'th' : b === 1 ? 'st' : b === 2 ? 'nd' : b === 3 ? 'rd' : 'th';\n    },\n    currency: {\n      symbol: '$'\n    }\n  });\n\n  (function () {\n    numeral.register('format', 'bps', {\n      regexps: {\n        format: /(BPS)/,\n        unformat: /(BPS)/\n      },\n      format: function (value, format, roundingFunction) {\n        var space = numeral._.includes(format, ' BPS') ? ' ' : '',\n            output;\n        value = value * 10000; // check for space before BPS\n\n        format = format.replace(/\\s?BPS/, '');\n        output = numeral._.numberToFormat(value, format, roundingFunction);\n\n        if (numeral._.includes(output, ')')) {\n          output = output.split('');\n          output.splice(-1, 0, space + 'BPS');\n          output = output.join('');\n        } else {\n          output = output + space + 'BPS';\n        }\n\n        return output;\n      },\n      unformat: function (string) {\n        return +(numeral._.stringToNumber(string) * 0.0001).toFixed(15);\n      }\n    });\n  })();\n\n  (function () {\n    var decimal = {\n      base: 1000,\n      suffixes: ['B', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB']\n    },\n        binary = {\n      base: 1024,\n      suffixes: ['B', 'KiB', 'MiB', 'GiB', 'TiB', 'PiB', 'EiB', 'ZiB', 'YiB']\n    };\n    var allSuffixes = decimal.suffixes.concat(binary.suffixes.filter(function (item) {\n      return decimal.suffixes.indexOf(item) < 0;\n    }));\n    var unformatRegex = allSuffixes.join('|'); // Allow support for BPS (http://www.investopedia.com/terms/b/basispoint.asp)\n\n    unformatRegex = '(' + unformatRegex.replace('B', 'B(?!PS)') + ')';\n    numeral.register('format', 'bytes', {\n      regexps: {\n        format: /([0\\s]i?b)/,\n        unformat: new RegExp(unformatRegex)\n      },\n      format: function (value, format, roundingFunction) {\n        var output,\n            bytes = numeral._.includes(format, 'ib') ? binary : decimal,\n            suffix = numeral._.includes(format, ' b') || numeral._.includes(format, ' ib') ? ' ' : '',\n            power,\n            min,\n            max; // check for space before\n\n        format = format.replace(/\\s?i?b/, '');\n\n        for (power = 0; power <= bytes.suffixes.length; power++) {\n          min = Math.pow(bytes.base, power);\n          max = Math.pow(bytes.base, power + 1);\n\n          if (value === null || value === 0 || value >= min && value < max) {\n            suffix += bytes.suffixes[power];\n\n            if (min > 0) {\n              value = value / min;\n            }\n\n            break;\n          }\n        }\n\n        output = numeral._.numberToFormat(value, format, roundingFunction);\n        return output + suffix;\n      },\n      unformat: function (string) {\n        var value = numeral._.stringToNumber(string),\n            power,\n            bytesMultiplier;\n\n        if (value) {\n          for (power = decimal.suffixes.length - 1; power >= 0; power--) {\n            if (numeral._.includes(string, decimal.suffixes[power])) {\n              bytesMultiplier = Math.pow(decimal.base, power);\n              break;\n            }\n\n            if (numeral._.includes(string, binary.suffixes[power])) {\n              bytesMultiplier = Math.pow(binary.base, power);\n              break;\n            }\n          }\n\n          value *= bytesMultiplier || 1;\n        }\n\n        return value;\n      }\n    });\n  })();\n\n  (function () {\n    numeral.register('format', 'currency', {\n      regexps: {\n        format: /(\\$)/\n      },\n      format: function (value, format, roundingFunction) {\n        var locale = numeral.locales[numeral.options.currentLocale],\n            symbols = {\n          before: format.match(/^([\\+|\\-|\\(|\\s|\\$]*)/)[0],\n          after: format.match(/([\\+|\\-|\\)|\\s|\\$]*)$/)[0]\n        },\n            output,\n            symbol,\n            i; // strip format of spaces and $\n\n        format = format.replace(/\\s?\\$\\s?/, ''); // format the number\n\n        output = numeral._.numberToFormat(value, format, roundingFunction); // update the before and after based on value\n\n        if (value >= 0) {\n          symbols.before = symbols.before.replace(/[\\-\\(]/, '');\n          symbols.after = symbols.after.replace(/[\\-\\)]/, '');\n        } else if (value < 0 && !numeral._.includes(symbols.before, '-') && !numeral._.includes(symbols.before, '(')) {\n          symbols.before = '-' + symbols.before;\n        } // loop through each before symbol\n\n\n        for (i = 0; i < symbols.before.length; i++) {\n          symbol = symbols.before[i];\n\n          switch (symbol) {\n            case '$':\n              output = numeral._.insert(output, locale.currency.symbol, i);\n              break;\n\n            case ' ':\n              output = numeral._.insert(output, ' ', i + locale.currency.symbol.length - 1);\n              break;\n          }\n        } // loop through each after symbol\n\n\n        for (i = symbols.after.length - 1; i >= 0; i--) {\n          symbol = symbols.after[i];\n\n          switch (symbol) {\n            case '$':\n              output = i === symbols.after.length - 1 ? output + locale.currency.symbol : numeral._.insert(output, locale.currency.symbol, -(symbols.after.length - (1 + i)));\n              break;\n\n            case ' ':\n              output = i === symbols.after.length - 1 ? output + ' ' : numeral._.insert(output, ' ', -(symbols.after.length - (1 + i) + locale.currency.symbol.length - 1));\n              break;\n          }\n        }\n\n        return output;\n      }\n    });\n  })();\n\n  (function () {\n    numeral.register('format', 'exponential', {\n      regexps: {\n        format: /(e\\+|e-)/,\n        unformat: /(e\\+|e-)/\n      },\n      format: function (value, format, roundingFunction) {\n        var output,\n            exponential = typeof value === 'number' && !numeral._.isNaN(value) ? value.toExponential() : '0e+0',\n            parts = exponential.split('e');\n        format = format.replace(/e[\\+|\\-]{1}0/, '');\n        output = numeral._.numberToFormat(Number(parts[0]), format, roundingFunction);\n        return output + 'e' + parts[1];\n      },\n      unformat: function (string) {\n        var parts = numeral._.includes(string, 'e+') ? string.split('e+') : string.split('e-'),\n            value = Number(parts[0]),\n            power = Number(parts[1]);\n        power = numeral._.includes(string, 'e-') ? power *= -1 : power;\n\n        function cback(accum, curr, currI, O) {\n          var corrFactor = numeral._.correctionFactor(accum, curr),\n              num = accum * corrFactor * (curr * corrFactor) / (corrFactor * corrFactor);\n\n          return num;\n        }\n\n        return numeral._.reduce([value, Math.pow(10, power)], cback, 1);\n      }\n    });\n  })();\n\n  (function () {\n    numeral.register('format', 'ordinal', {\n      regexps: {\n        format: /(o)/\n      },\n      format: function (value, format, roundingFunction) {\n        var locale = numeral.locales[numeral.options.currentLocale],\n            output,\n            ordinal = numeral._.includes(format, ' o') ? ' ' : ''; // check for space before\n\n        format = format.replace(/\\s?o/, '');\n        ordinal += locale.ordinal(value);\n        output = numeral._.numberToFormat(value, format, roundingFunction);\n        return output + ordinal;\n      }\n    });\n  })();\n\n  (function () {\n    numeral.register('format', 'percentage', {\n      regexps: {\n        format: /(%)/,\n        unformat: /(%)/\n      },\n      format: function (value, format, roundingFunction) {\n        var space = numeral._.includes(format, ' %') ? ' ' : '',\n            output;\n\n        if (numeral.options.scalePercentBy100) {\n          value = value * 100;\n        } // check for space before %\n\n\n        format = format.replace(/\\s?\\%/, '');\n        output = numeral._.numberToFormat(value, format, roundingFunction);\n\n        if (numeral._.includes(output, ')')) {\n          output = output.split('');\n          output.splice(-1, 0, space + '%');\n          output = output.join('');\n        } else {\n          output = output + space + '%';\n        }\n\n        return output;\n      },\n      unformat: function (string) {\n        var number = numeral._.stringToNumber(string);\n\n        if (numeral.options.scalePercentBy100) {\n          return number * 0.01;\n        }\n\n        return number;\n      }\n    });\n  })();\n\n  (function () {\n    numeral.register('format', 'time', {\n      regexps: {\n        format: /(:)/,\n        unformat: /(:)/\n      },\n      format: function (value, format, roundingFunction) {\n        var hours = Math.floor(value / 60 / 60),\n            minutes = Math.floor((value - hours * 60 * 60) / 60),\n            seconds = Math.round(value - hours * 60 * 60 - minutes * 60);\n        return hours + ':' + (minutes < 10 ? '0' + minutes : minutes) + ':' + (seconds < 10 ? '0' + seconds : seconds);\n      },\n      unformat: function (string) {\n        var timeArray = string.split(':'),\n            seconds = 0; // turn hours and minutes into seconds and add them all up\n\n        if (timeArray.length === 3) {\n          // hours\n          seconds = seconds + Number(timeArray[0]) * 60 * 60; // minutes\n\n          seconds = seconds + Number(timeArray[1]) * 60; // seconds\n\n          seconds = seconds + Number(timeArray[2]);\n        } else if (timeArray.length === 2) {\n          // minutes\n          seconds = seconds + Number(timeArray[0]) * 60; // seconds\n\n          seconds = seconds + Number(timeArray[1]);\n        }\n\n        return Number(seconds);\n      }\n    });\n  })();\n\n  return numeral;\n});","map":{"version":3,"names":["global","factory","define","amd","module","exports","numeral","_","VERSION","formats","locales","defaults","currentLocale","zeroFormat","nullFormat","defaultFormat","scalePercentBy100","options","Numeral","input","number","_input","_value","value","kind","unformatFunction","regexp","isNumeral","isNaN","replace","length","regexps","unformat","match","stringToNumber","Number","version","obj","numberToFormat","format","roundingFunction","locale","negP","optDec","leadingCount","abbr","trillion","billion","million","thousand","decimal","neg","abbrForce","abs","min","max","power","int","precision","signed","thousands","output","Math","includes","indexOf","RegExp","abbreviations","toString","split","toFixed","delimiters","slice","String","i","string","stringOriginal","abbreviation","currency","symbol","pow","search","insert","subString","start","reduce","array","callback","TypeError","t","Object","len","k","arguments","multiplier","x","parts","correctionFactor","args","Array","prototype","call","accum","next","mn","maxDecimals","optionals","splitValue","minDecimals","boundedPrecision","optionalsRegExp","key","toLowerCase","localeData","Error","reset","property","register","type","name","validate","val","culture","_decimalSep","_thousandSep","_currSymbol","_valArray","_abbrObj","_thousandRegEx","temp","console","warn","trim","e","substr","fn","clone","inputString","formatFunction","round","set","add","corrFactor","cback","curr","currI","O","subtract","multiply","divide","difference","ordinal","b","space","splice","join","base","suffixes","binary","allSuffixes","concat","filter","item","unformatRegex","bytes","suffix","bytesMultiplier","symbols","before","after","exponential","toExponential","num","hours","floor","minutes","seconds","timeArray"],"sources":["F:/Programming/Projects/Twitter-Like-App/tweetme2/tweetme2-web/node_modules/numeral/numeral.js"],"sourcesContent":["/*! @preserve\n * numeral.js\n * version : 2.0.6\n * author : Adam Draper\n * license : MIT\n * http://adamwdraper.github.com/Numeral-js/\n */\n\n(function (global, factory) {\n    if (typeof define === 'function' && define.amd) {\n        define(factory);\n    } else if (typeof module === 'object' && module.exports) {\n        module.exports = factory();\n    } else {\n        global.numeral = factory();\n    }\n}(this, function () {\n    /************************************\n        Variables\n    ************************************/\n\n    var numeral,\n        _,\n        VERSION = '2.0.6',\n        formats = {},\n        locales = {},\n        defaults = {\n            currentLocale: 'en',\n            zeroFormat: null,\n            nullFormat: null,\n            defaultFormat: '0,0',\n            scalePercentBy100: true\n        },\n        options = {\n            currentLocale: defaults.currentLocale,\n            zeroFormat: defaults.zeroFormat,\n            nullFormat: defaults.nullFormat,\n            defaultFormat: defaults.defaultFormat,\n            scalePercentBy100: defaults.scalePercentBy100\n        };\n\n\n    /************************************\n        Constructors\n    ************************************/\n\n    // Numeral prototype object\n    function Numeral(input, number) {\n        this._input = input;\n\n        this._value = number;\n    }\n\n    numeral = function(input) {\n        var value,\n            kind,\n            unformatFunction,\n            regexp;\n\n        if (numeral.isNumeral(input)) {\n            value = input.value();\n        } else if (input === 0 || typeof input === 'undefined') {\n            value = 0;\n        } else if (input === null || _.isNaN(input)) {\n            value = null;\n        } else if (typeof input === 'string') {\n            if (options.zeroFormat && input === options.zeroFormat) {\n                value = 0;\n            } else if (options.nullFormat && input === options.nullFormat || !input.replace(/[^0-9]+/g, '').length) {\n                value = null;\n            } else {\n                for (kind in formats) {\n                    regexp = typeof formats[kind].regexps.unformat === 'function' ? formats[kind].regexps.unformat() : formats[kind].regexps.unformat;\n\n                    if (regexp && input.match(regexp)) {\n                        unformatFunction = formats[kind].unformat;\n\n                        break;\n                    }\n                }\n\n                unformatFunction = unformatFunction || numeral._.stringToNumber;\n\n                value = unformatFunction(input);\n            }\n        } else {\n            value = Number(input)|| null;\n        }\n\n        return new Numeral(input, value);\n    };\n\n    // version number\n    numeral.version = VERSION;\n\n    // compare numeral object\n    numeral.isNumeral = function(obj) {\n        return obj instanceof Numeral;\n    };\n\n    // helper functions\n    numeral._ = _ = {\n        // formats numbers separators, decimals places, signs, abbreviations\n        numberToFormat: function(value, format, roundingFunction) {\n            var locale = locales[numeral.options.currentLocale],\n                negP = false,\n                optDec = false,\n                leadingCount = 0,\n                abbr = '',\n                trillion = 1000000000000,\n                billion = 1000000000,\n                million = 1000000,\n                thousand = 1000,\n                decimal = '',\n                neg = false,\n                abbrForce, // force abbreviation\n                abs,\n                min,\n                max,\n                power,\n                int,\n                precision,\n                signed,\n                thousands,\n                output;\n\n            // make sure we never format a null value\n            value = value || 0;\n\n            abs = Math.abs(value);\n\n            // see if we should use parentheses for negative number or if we should prefix with a sign\n            // if both are present we default to parentheses\n            if (numeral._.includes(format, '(')) {\n                negP = true;\n                format = format.replace(/[\\(|\\)]/g, '');\n            } else if (numeral._.includes(format, '+') || numeral._.includes(format, '-')) {\n                signed = numeral._.includes(format, '+') ? format.indexOf('+') : value < 0 ? format.indexOf('-') : -1;\n                format = format.replace(/[\\+|\\-]/g, '');\n            }\n\n            // see if abbreviation is wanted\n            if (numeral._.includes(format, 'a')) {\n                abbrForce = format.match(/a(k|m|b|t)?/);\n\n                abbrForce = abbrForce ? abbrForce[1] : false;\n\n                // check for space before abbreviation\n                if (numeral._.includes(format, ' a')) {\n                    abbr = ' ';\n                }\n\n                format = format.replace(new RegExp(abbr + 'a[kmbt]?'), '');\n\n                if (abs >= trillion && !abbrForce || abbrForce === 't') {\n                    // trillion\n                    abbr += locale.abbreviations.trillion;\n                    value = value / trillion;\n                } else if (abs < trillion && abs >= billion && !abbrForce || abbrForce === 'b') {\n                    // billion\n                    abbr += locale.abbreviations.billion;\n                    value = value / billion;\n                } else if (abs < billion && abs >= million && !abbrForce || abbrForce === 'm') {\n                    // million\n                    abbr += locale.abbreviations.million;\n                    value = value / million;\n                } else if (abs < million && abs >= thousand && !abbrForce || abbrForce === 'k') {\n                    // thousand\n                    abbr += locale.abbreviations.thousand;\n                    value = value / thousand;\n                }\n            }\n\n            // check for optional decimals\n            if (numeral._.includes(format, '[.]')) {\n                optDec = true;\n                format = format.replace('[.]', '.');\n            }\n\n            // break number and format\n            int = value.toString().split('.')[0];\n            precision = format.split('.')[1];\n            thousands = format.indexOf(',');\n            leadingCount = (format.split('.')[0].split(',')[0].match(/0/g) || []).length;\n\n            if (precision) {\n                if (numeral._.includes(precision, '[')) {\n                    precision = precision.replace(']', '');\n                    precision = precision.split('[');\n                    decimal = numeral._.toFixed(value, (precision[0].length + precision[1].length), roundingFunction, precision[1].length);\n                } else {\n                    decimal = numeral._.toFixed(value, precision.length, roundingFunction);\n                }\n\n                int = decimal.split('.')[0];\n\n                if (numeral._.includes(decimal, '.')) {\n                    decimal = locale.delimiters.decimal + decimal.split('.')[1];\n                } else {\n                    decimal = '';\n                }\n\n                if (optDec && Number(decimal.slice(1)) === 0) {\n                    decimal = '';\n                }\n            } else {\n                int = numeral._.toFixed(value, 0, roundingFunction);\n            }\n\n            // check abbreviation again after rounding\n            if (abbr && !abbrForce && Number(int) >= 1000 && abbr !== locale.abbreviations.trillion) {\n                int = String(Number(int) / 1000);\n\n                switch (abbr) {\n                    case locale.abbreviations.thousand:\n                        abbr = locale.abbreviations.million;\n                        break;\n                    case locale.abbreviations.million:\n                        abbr = locale.abbreviations.billion;\n                        break;\n                    case locale.abbreviations.billion:\n                        abbr = locale.abbreviations.trillion;\n                        break;\n                }\n            }\n\n\n            // format number\n            if (numeral._.includes(int, '-')) {\n                int = int.slice(1);\n                neg = true;\n            }\n\n            if (int.length < leadingCount) {\n                for (var i = leadingCount - int.length; i > 0; i--) {\n                    int = '0' + int;\n                }\n            }\n\n            if (thousands > -1) {\n                int = int.toString().replace(/(\\d)(?=(\\d{3})+(?!\\d))/g, '$1' + locale.delimiters.thousands);\n            }\n\n            if (format.indexOf('.') === 0) {\n                int = '';\n            }\n\n            output = int + decimal + (abbr ? abbr : '');\n\n            if (negP) {\n                output = (negP && neg ? '(' : '') + output + (negP && neg ? ')' : '');\n            } else {\n                if (signed >= 0) {\n                    output = signed === 0 ? (neg ? '-' : '+') + output : output + (neg ? '-' : '+');\n                } else if (neg) {\n                    output = '-' + output;\n                }\n            }\n\n            return output;\n        },\n        // unformats numbers separators, decimals places, signs, abbreviations\n        stringToNumber: function(string) {\n            var locale = locales[options.currentLocale],\n                stringOriginal = string,\n                abbreviations = {\n                    thousand: 3,\n                    million: 6,\n                    billion: 9,\n                    trillion: 12\n                },\n                abbreviation,\n                value,\n                i,\n                regexp;\n\n            if (options.zeroFormat && string === options.zeroFormat) {\n                value = 0;\n            } else if (options.nullFormat && string === options.nullFormat || !string.replace(/[^0-9]+/g, '').length) {\n                value = null;\n            } else {\n                value = 1;\n\n                if (locale.delimiters.decimal !== '.') {\n                    string = string.replace(/\\./g, '').replace(locale.delimiters.decimal, '.');\n                }\n\n                for (abbreviation in abbreviations) {\n                    regexp = new RegExp('[^a-zA-Z]' + locale.abbreviations[abbreviation] + '(?:\\\\)|(\\\\' + locale.currency.symbol + ')?(?:\\\\))?)?$');\n\n                    if (stringOriginal.match(regexp)) {\n                        value *= Math.pow(10, abbreviations[abbreviation]);\n                        break;\n                    }\n                }\n\n                // check for negative number\n                value *= (string.split('-').length + Math.min(string.split('(').length - 1, string.split(')').length - 1)) % 2 ? 1 : -1;\n\n                // remove non numbers\n                string = string.replace(/[^0-9\\.]+/g, '');\n\n                value *= Number(string);\n            }\n\n            return value;\n        },\n        isNaN: function(value) {\n            return typeof value === 'number' && isNaN(value);\n        },\n        includes: function(string, search) {\n            return string.indexOf(search) !== -1;\n        },\n        insert: function(string, subString, start) {\n            return string.slice(0, start) + subString + string.slice(start);\n        },\n        reduce: function(array, callback /*, initialValue*/) {\n            if (this === null) {\n                throw new TypeError('Array.prototype.reduce called on null or undefined');\n            }\n\n            if (typeof callback !== 'function') {\n                throw new TypeError(callback + ' is not a function');\n            }\n\n            var t = Object(array),\n                len = t.length >>> 0,\n                k = 0,\n                value;\n\n            if (arguments.length === 3) {\n                value = arguments[2];\n            } else {\n                while (k < len && !(k in t)) {\n                    k++;\n                }\n\n                if (k >= len) {\n                    throw new TypeError('Reduce of empty array with no initial value');\n                }\n\n                value = t[k++];\n            }\n            for (; k < len; k++) {\n                if (k in t) {\n                    value = callback(value, t[k], k, t);\n                }\n            }\n            return value;\n        },\n        /**\n         * Computes the multiplier necessary to make x >= 1,\n         * effectively eliminating miscalculations caused by\n         * finite precision.\n         */\n        multiplier: function (x) {\n            var parts = x.toString().split('.');\n\n            return parts.length < 2 ? 1 : Math.pow(10, parts[1].length);\n        },\n        /**\n         * Given a variable number of arguments, returns the maximum\n         * multiplier that must be used to normalize an operation involving\n         * all of them.\n         */\n        correctionFactor: function () {\n            var args = Array.prototype.slice.call(arguments);\n\n            return args.reduce(function(accum, next) {\n                var mn = _.multiplier(next);\n                return accum > mn ? accum : mn;\n            }, 1);\n        },\n        /**\n         * Implementation of toFixed() that treats floats more like decimals\n         *\n         * Fixes binary rounding issues (eg. (0.615).toFixed(2) === '0.61') that present\n         * problems for accounting- and finance-related software.\n         */\n        toFixed: function(value, maxDecimals, roundingFunction, optionals) {\n            var splitValue = value.toString().split('.'),\n                minDecimals = maxDecimals - (optionals || 0),\n                boundedPrecision,\n                optionalsRegExp,\n                power,\n                output;\n\n            // Use the smallest precision value possible to avoid errors from floating point representation\n            if (splitValue.length === 2) {\n              boundedPrecision = Math.min(Math.max(splitValue[1].length, minDecimals), maxDecimals);\n            } else {\n              boundedPrecision = minDecimals;\n            }\n\n            power = Math.pow(10, boundedPrecision);\n\n            // Multiply up by precision, round accurately, then divide and use native toFixed():\n            output = (roundingFunction(value + 'e+' + boundedPrecision) / power).toFixed(boundedPrecision);\n\n            if (optionals > maxDecimals - boundedPrecision) {\n                optionalsRegExp = new RegExp('\\\\.?0{1,' + (optionals - (maxDecimals - boundedPrecision)) + '}$');\n                output = output.replace(optionalsRegExp, '');\n            }\n\n            return output;\n        }\n    };\n\n    // avaliable options\n    numeral.options = options;\n\n    // avaliable formats\n    numeral.formats = formats;\n\n    // avaliable formats\n    numeral.locales = locales;\n\n    // This function sets the current locale.  If\n    // no arguments are passed in, it will simply return the current global\n    // locale key.\n    numeral.locale = function(key) {\n        if (key) {\n            options.currentLocale = key.toLowerCase();\n        }\n\n        return options.currentLocale;\n    };\n\n    // This function provides access to the loaded locale data.  If\n    // no arguments are passed in, it will simply return the current\n    // global locale object.\n    numeral.localeData = function(key) {\n        if (!key) {\n            return locales[options.currentLocale];\n        }\n\n        key = key.toLowerCase();\n\n        if (!locales[key]) {\n            throw new Error('Unknown locale : ' + key);\n        }\n\n        return locales[key];\n    };\n\n    numeral.reset = function() {\n        for (var property in defaults) {\n            options[property] = defaults[property];\n        }\n    };\n\n    numeral.zeroFormat = function(format) {\n        options.zeroFormat = typeof(format) === 'string' ? format : null;\n    };\n\n    numeral.nullFormat = function (format) {\n        options.nullFormat = typeof(format) === 'string' ? format : null;\n    };\n\n    numeral.defaultFormat = function(format) {\n        options.defaultFormat = typeof(format) === 'string' ? format : '0.0';\n    };\n\n    numeral.register = function(type, name, format) {\n        name = name.toLowerCase();\n\n        if (this[type + 's'][name]) {\n            throw new TypeError(name + ' ' + type + ' already registered.');\n        }\n\n        this[type + 's'][name] = format;\n\n        return format;\n    };\n\n\n    numeral.validate = function(val, culture) {\n        var _decimalSep,\n            _thousandSep,\n            _currSymbol,\n            _valArray,\n            _abbrObj,\n            _thousandRegEx,\n            localeData,\n            temp;\n\n        //coerce val to string\n        if (typeof val !== 'string') {\n            val += '';\n\n            if (console.warn) {\n                console.warn('Numeral.js: Value is not string. It has been co-erced to: ', val);\n            }\n        }\n\n        //trim whitespaces from either sides\n        val = val.trim();\n\n        //if val is just digits return true\n        if (!!val.match(/^\\d+$/)) {\n            return true;\n        }\n\n        //if val is empty return false\n        if (val === '') {\n            return false;\n        }\n\n        //get the decimal and thousands separator from numeral.localeData\n        try {\n            //check if the culture is understood by numeral. if not, default it to current locale\n            localeData = numeral.localeData(culture);\n        } catch (e) {\n            localeData = numeral.localeData(numeral.locale());\n        }\n\n        //setup the delimiters and currency symbol based on culture/locale\n        _currSymbol = localeData.currency.symbol;\n        _abbrObj = localeData.abbreviations;\n        _decimalSep = localeData.delimiters.decimal;\n        if (localeData.delimiters.thousands === '.') {\n            _thousandSep = '\\\\.';\n        } else {\n            _thousandSep = localeData.delimiters.thousands;\n        }\n\n        // validating currency symbol\n        temp = val.match(/^[^\\d]+/);\n        if (temp !== null) {\n            val = val.substr(1);\n            if (temp[0] !== _currSymbol) {\n                return false;\n            }\n        }\n\n        //validating abbreviation symbol\n        temp = val.match(/[^\\d]+$/);\n        if (temp !== null) {\n            val = val.slice(0, -1);\n            if (temp[0] !== _abbrObj.thousand && temp[0] !== _abbrObj.million && temp[0] !== _abbrObj.billion && temp[0] !== _abbrObj.trillion) {\n                return false;\n            }\n        }\n\n        _thousandRegEx = new RegExp(_thousandSep + '{2}');\n\n        if (!val.match(/[^\\d.,]/g)) {\n            _valArray = val.split(_decimalSep);\n            if (_valArray.length > 2) {\n                return false;\n            } else {\n                if (_valArray.length < 2) {\n                    return ( !! _valArray[0].match(/^\\d+.*\\d$/) && !_valArray[0].match(_thousandRegEx));\n                } else {\n                    if (_valArray[0].length === 1) {\n                        return ( !! _valArray[0].match(/^\\d+$/) && !_valArray[0].match(_thousandRegEx) && !! _valArray[1].match(/^\\d+$/));\n                    } else {\n                        return ( !! _valArray[0].match(/^\\d+.*\\d$/) && !_valArray[0].match(_thousandRegEx) && !! _valArray[1].match(/^\\d+$/));\n                    }\n                }\n            }\n        }\n\n        return false;\n    };\n\n\n    /************************************\n        Numeral Prototype\n    ************************************/\n\n    numeral.fn = Numeral.prototype = {\n        clone: function() {\n            return numeral(this);\n        },\n        format: function(inputString, roundingFunction) {\n            var value = this._value,\n                format = inputString || options.defaultFormat,\n                kind,\n                output,\n                formatFunction;\n\n            // make sure we have a roundingFunction\n            roundingFunction = roundingFunction || Math.round;\n\n            // format based on value\n            if (value === 0 && options.zeroFormat !== null) {\n                output = options.zeroFormat;\n            } else if (value === null && options.nullFormat !== null) {\n                output = options.nullFormat;\n            } else {\n                for (kind in formats) {\n                    if (format.match(formats[kind].regexps.format)) {\n                        formatFunction = formats[kind].format;\n\n                        break;\n                    }\n                }\n\n                formatFunction = formatFunction || numeral._.numberToFormat;\n\n                output = formatFunction(value, format, roundingFunction);\n            }\n\n            return output;\n        },\n        value: function() {\n            return this._value;\n        },\n        input: function() {\n            return this._input;\n        },\n        set: function(value) {\n            this._value = Number(value);\n\n            return this;\n        },\n        add: function(value) {\n            var corrFactor = _.correctionFactor.call(null, this._value, value);\n\n            function cback(accum, curr, currI, O) {\n                return accum + Math.round(corrFactor * curr);\n            }\n\n            this._value = _.reduce([this._value, value], cback, 0) / corrFactor;\n\n            return this;\n        },\n        subtract: function(value) {\n            var corrFactor = _.correctionFactor.call(null, this._value, value);\n\n            function cback(accum, curr, currI, O) {\n                return accum - Math.round(corrFactor * curr);\n            }\n\n            this._value = _.reduce([value], cback, Math.round(this._value * corrFactor)) / corrFactor;\n\n            return this;\n        },\n        multiply: function(value) {\n            function cback(accum, curr, currI, O) {\n                var corrFactor = _.correctionFactor(accum, curr);\n                return Math.round(accum * corrFactor) * Math.round(curr * corrFactor) / Math.round(corrFactor * corrFactor);\n            }\n\n            this._value = _.reduce([this._value, value], cback, 1);\n\n            return this;\n        },\n        divide: function(value) {\n            function cback(accum, curr, currI, O) {\n                var corrFactor = _.correctionFactor(accum, curr);\n                return Math.round(accum * corrFactor) / Math.round(curr * corrFactor);\n            }\n\n            this._value = _.reduce([this._value, value], cback);\n\n            return this;\n        },\n        difference: function(value) {\n            return Math.abs(numeral(this._value).subtract(value).value());\n        }\n    };\n\n    /************************************\n        Default Locale && Format\n    ************************************/\n\n    numeral.register('locale', 'en', {\n        delimiters: {\n            thousands: ',',\n            decimal: '.'\n        },\n        abbreviations: {\n            thousand: 'k',\n            million: 'm',\n            billion: 'b',\n            trillion: 't'\n        },\n        ordinal: function(number) {\n            var b = number % 10;\n            return (~~(number % 100 / 10) === 1) ? 'th' :\n                (b === 1) ? 'st' :\n                (b === 2) ? 'nd' :\n                (b === 3) ? 'rd' : 'th';\n        },\n        currency: {\n            symbol: '$'\n        }\n    });\n\n    \n\n(function() {\n        numeral.register('format', 'bps', {\n            regexps: {\n                format: /(BPS)/,\n                unformat: /(BPS)/\n            },\n            format: function(value, format, roundingFunction) {\n                var space = numeral._.includes(format, ' BPS') ? ' ' : '',\n                    output;\n\n                value = value * 10000;\n\n                // check for space before BPS\n                format = format.replace(/\\s?BPS/, '');\n\n                output = numeral._.numberToFormat(value, format, roundingFunction);\n\n                if (numeral._.includes(output, ')')) {\n                    output = output.split('');\n\n                    output.splice(-1, 0, space + 'BPS');\n\n                    output = output.join('');\n                } else {\n                    output = output + space + 'BPS';\n                }\n\n                return output;\n            },\n            unformat: function(string) {\n                return +(numeral._.stringToNumber(string) * 0.0001).toFixed(15);\n            }\n        });\n})();\n\n\n(function() {\n        var decimal = {\n            base: 1000,\n            suffixes: ['B', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB']\n        },\n        binary = {\n            base: 1024,\n            suffixes: ['B', 'KiB', 'MiB', 'GiB', 'TiB', 'PiB', 'EiB', 'ZiB', 'YiB']\n        };\n\n    var allSuffixes =  decimal.suffixes.concat(binary.suffixes.filter(function (item) {\n            return decimal.suffixes.indexOf(item) < 0;\n        }));\n        var unformatRegex = allSuffixes.join('|');\n        // Allow support for BPS (http://www.investopedia.com/terms/b/basispoint.asp)\n        unformatRegex = '(' + unformatRegex.replace('B', 'B(?!PS)') + ')';\n\n    numeral.register('format', 'bytes', {\n        regexps: {\n            format: /([0\\s]i?b)/,\n            unformat: new RegExp(unformatRegex)\n        },\n        format: function(value, format, roundingFunction) {\n            var output,\n                bytes = numeral._.includes(format, 'ib') ? binary : decimal,\n                suffix = numeral._.includes(format, ' b') || numeral._.includes(format, ' ib') ? ' ' : '',\n                power,\n                min,\n                max;\n\n            // check for space before\n            format = format.replace(/\\s?i?b/, '');\n\n            for (power = 0; power <= bytes.suffixes.length; power++) {\n                min = Math.pow(bytes.base, power);\n                max = Math.pow(bytes.base, power + 1);\n\n                if (value === null || value === 0 || value >= min && value < max) {\n                    suffix += bytes.suffixes[power];\n\n                    if (min > 0) {\n                        value = value / min;\n                    }\n\n                    break;\n                }\n            }\n\n            output = numeral._.numberToFormat(value, format, roundingFunction);\n\n            return output + suffix;\n        },\n        unformat: function(string) {\n            var value = numeral._.stringToNumber(string),\n                power,\n                bytesMultiplier;\n\n            if (value) {\n                for (power = decimal.suffixes.length - 1; power >= 0; power--) {\n                    if (numeral._.includes(string, decimal.suffixes[power])) {\n                        bytesMultiplier = Math.pow(decimal.base, power);\n\n                        break;\n                    }\n\n                    if (numeral._.includes(string, binary.suffixes[power])) {\n                        bytesMultiplier = Math.pow(binary.base, power);\n\n                        break;\n                    }\n                }\n\n                value *= (bytesMultiplier || 1);\n            }\n\n            return value;\n        }\n    });\n})();\n\n\n(function() {\n        numeral.register('format', 'currency', {\n        regexps: {\n            format: /(\\$)/\n        },\n        format: function(value, format, roundingFunction) {\n            var locale = numeral.locales[numeral.options.currentLocale],\n                symbols = {\n                    before: format.match(/^([\\+|\\-|\\(|\\s|\\$]*)/)[0],\n                    after: format.match(/([\\+|\\-|\\)|\\s|\\$]*)$/)[0]\n                },\n                output,\n                symbol,\n                i;\n\n            // strip format of spaces and $\n            format = format.replace(/\\s?\\$\\s?/, '');\n\n            // format the number\n            output = numeral._.numberToFormat(value, format, roundingFunction);\n\n            // update the before and after based on value\n            if (value >= 0) {\n                symbols.before = symbols.before.replace(/[\\-\\(]/, '');\n                symbols.after = symbols.after.replace(/[\\-\\)]/, '');\n            } else if (value < 0 && (!numeral._.includes(symbols.before, '-') && !numeral._.includes(symbols.before, '('))) {\n                symbols.before = '-' + symbols.before;\n            }\n\n            // loop through each before symbol\n            for (i = 0; i < symbols.before.length; i++) {\n                symbol = symbols.before[i];\n\n                switch (symbol) {\n                    case '$':\n                        output = numeral._.insert(output, locale.currency.symbol, i);\n                        break;\n                    case ' ':\n                        output = numeral._.insert(output, ' ', i + locale.currency.symbol.length - 1);\n                        break;\n                }\n            }\n\n            // loop through each after symbol\n            for (i = symbols.after.length - 1; i >= 0; i--) {\n                symbol = symbols.after[i];\n\n                switch (symbol) {\n                    case '$':\n                        output = i === symbols.after.length - 1 ? output + locale.currency.symbol : numeral._.insert(output, locale.currency.symbol, -(symbols.after.length - (1 + i)));\n                        break;\n                    case ' ':\n                        output = i === symbols.after.length - 1 ? output + ' ' : numeral._.insert(output, ' ', -(symbols.after.length - (1 + i) + locale.currency.symbol.length - 1));\n                        break;\n                }\n            }\n\n\n            return output;\n        }\n    });\n})();\n\n\n(function() {\n        numeral.register('format', 'exponential', {\n        regexps: {\n            format: /(e\\+|e-)/,\n            unformat: /(e\\+|e-)/\n        },\n        format: function(value, format, roundingFunction) {\n            var output,\n                exponential = typeof value === 'number' && !numeral._.isNaN(value) ? value.toExponential() : '0e+0',\n                parts = exponential.split('e');\n\n            format = format.replace(/e[\\+|\\-]{1}0/, '');\n\n            output = numeral._.numberToFormat(Number(parts[0]), format, roundingFunction);\n\n            return output + 'e' + parts[1];\n        },\n        unformat: function(string) {\n            var parts = numeral._.includes(string, 'e+') ? string.split('e+') : string.split('e-'),\n                value = Number(parts[0]),\n                power = Number(parts[1]);\n\n            power = numeral._.includes(string, 'e-') ? power *= -1 : power;\n\n            function cback(accum, curr, currI, O) {\n                var corrFactor = numeral._.correctionFactor(accum, curr),\n                    num = (accum * corrFactor) * (curr * corrFactor) / (corrFactor * corrFactor);\n                return num;\n            }\n\n            return numeral._.reduce([value, Math.pow(10, power)], cback, 1);\n        }\n    });\n})();\n\n\n(function() {\n        numeral.register('format', 'ordinal', {\n        regexps: {\n            format: /(o)/\n        },\n        format: function(value, format, roundingFunction) {\n            var locale = numeral.locales[numeral.options.currentLocale],\n                output,\n                ordinal = numeral._.includes(format, ' o') ? ' ' : '';\n\n            // check for space before\n            format = format.replace(/\\s?o/, '');\n\n            ordinal += locale.ordinal(value);\n\n            output = numeral._.numberToFormat(value, format, roundingFunction);\n\n            return output + ordinal;\n        }\n    });\n})();\n\n\n(function() {\n        numeral.register('format', 'percentage', {\n        regexps: {\n            format: /(%)/,\n            unformat: /(%)/\n        },\n        format: function(value, format, roundingFunction) {\n            var space = numeral._.includes(format, ' %') ? ' ' : '',\n                output;\n\n            if (numeral.options.scalePercentBy100) {\n                value = value * 100;\n            }\n\n            // check for space before %\n            format = format.replace(/\\s?\\%/, '');\n\n            output = numeral._.numberToFormat(value, format, roundingFunction);\n\n            if (numeral._.includes(output, ')')) {\n                output = output.split('');\n\n                output.splice(-1, 0, space + '%');\n\n                output = output.join('');\n            } else {\n                output = output + space + '%';\n            }\n\n            return output;\n        },\n        unformat: function(string) {\n            var number = numeral._.stringToNumber(string);\n            if (numeral.options.scalePercentBy100) {\n                return number * 0.01;\n            }\n            return number;\n        }\n    });\n})();\n\n\n(function() {\n        numeral.register('format', 'time', {\n        regexps: {\n            format: /(:)/,\n            unformat: /(:)/\n        },\n        format: function(value, format, roundingFunction) {\n            var hours = Math.floor(value / 60 / 60),\n                minutes = Math.floor((value - (hours * 60 * 60)) / 60),\n                seconds = Math.round(value - (hours * 60 * 60) - (minutes * 60));\n\n            return hours + ':' + (minutes < 10 ? '0' + minutes : minutes) + ':' + (seconds < 10 ? '0' + seconds : seconds);\n        },\n        unformat: function(string) {\n            var timeArray = string.split(':'),\n                seconds = 0;\n\n            // turn hours and minutes into seconds and add them all up\n            if (timeArray.length === 3) {\n                // hours\n                seconds = seconds + (Number(timeArray[0]) * 60 * 60);\n                // minutes\n                seconds = seconds + (Number(timeArray[1]) * 60);\n                // seconds\n                seconds = seconds + Number(timeArray[2]);\n            } else if (timeArray.length === 2) {\n                // minutes\n                seconds = seconds + (Number(timeArray[0]) * 60);\n                // seconds\n                seconds = seconds + Number(timeArray[1]);\n            }\n            return Number(seconds);\n        }\n    });\n})();\n\nreturn numeral;\n}));\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}